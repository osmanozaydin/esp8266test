#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266mDNS.h>
#include <WiFiManager.h>
#include <ESP8266httpUpdate.h>

// LED pin tanımı
#define LED_PIN 2  // D4 (GPIO2)

// Web sunucusu
ESP8266WebServer server(80);

// Mevcut firmware versiyonu
const String FIRMWARE_VERSION = "1.0.0";

// Uzak sunucu bilgileri
const String UPDATE_SERVER = "https://bindtrip.com/update";
const String VERSION_FILE = "/version.txt";
const String FIRMWARE_FILE = "/firmware.bin";

// LED durumu
bool ledState = false;

// Zamanlayıcı için değişkenler
unsigned long previousMillis = 0;
const long interval = 5000;  // 5 saniye

void setup() {
  Serial.begin(9600);

  // LED pinini çıkış olarak ayarla
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, HIGH);  // LED başlangıçta sönük (ESP8266'da LOW aktif)

  // Wi-Fi Manager ile bağlantı
  WiFiManager wifiManager;
  wifiManager.autoConnect("ESP8266-AP");

  Serial.println("Wi-Fi connected!");
  Serial.println("IP address: " + WiFi.localIP().toString());

  // Web sunucusu rotalarını tanımla
  server.on("/", handleRoot);
  server.on("/scan", handleScan);
  server.on("/connect", handleConnect);
  server.on("/update", handleUpdate);
  server.on("/ota", handleOTA);
  server.on("/led", handleLED);

  server.begin();
  Serial.println("HTTP server started");

  // mDNS (Opsiyonel, yerel ağda erişim için)
  if (MDNS.begin("esp8266")) {
    Serial.println("mDNS responder started");
  }
}

void loop() {
  server.handleClient();
  MDNS.update();

  // 5 saniyede bir "ESP aktif" yazdır
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    Serial.println("ESP aktif lo yeni veriyondasın");
  }
}

// Ana sayfa
void handleRoot() {
  String html = "<html><body>";
  html += "<h1>ESP8266 OTA Update & LED Control</h1>";
  html += "<p><a href=\"/scan\">Scan Wi-Fi Networks</a></p>";
  html += "<p><a href=\"/update\">Check for Firmware Update</a></p>";
  html += "<p><a href=\"/led\">Toggle LED</a></p>";
  html += "<p>Current Firmware Version: " + FIRMWARE_VERSION + "</p>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

// Wi-Fi ağlarını tarama
void handleScan() {
  String html = "<html><body><h1>Available Wi-Fi Networks</h1><ul>";
  int n = WiFi.scanNetworks();
  for (int i = 0; i < n; i++) {
    html += "<li>" + WiFi.SSID(i) + " <a href=\"/connect?ssid=" + WiFi.SSID(i) + "\">Connect</a></li>";
  }
  html += "</ul></body></html>";
  server.send(200, "text/html", html);
}

// Wi-Fi bağlantısı
void handleConnect() {
  String ssid = server.arg("ssid");
  String password = server.arg("password");

  if (ssid.length() > 0) {
    WiFi.begin(ssid.c_str(), password.c_str());
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      server.send(200, "text/plain", "Connected to " + ssid);
    } else {
      server.send(200, "text/plain", "Failed to connect to " + ssid);
    }
  } else {
    server.send(200, "text/plain", "SSID not provided.");
  }
}

// Güncelleme kontrolü
void handleUpdate() {
  String remoteVersion = checkRemoteVersion();

  if (remoteVersion != FIRMWARE_VERSION) {
    String html = "<html><body>";
    html += "<h1>Update Available</h1>";
    html += "<p>Current Version: " + FIRMWARE_VERSION + "</p>";
    html += "<p>Remote Version: " + remoteVersion + "</p>";
    html += "<p><a href=\"/ota\">Update Now</a></p>";
    html += "</body></html>";
    server.send(200, "text/html", html);
  } else {
    server.send(200, "text/plain", "No update available.");
  }
}

void handleOTA() {
  WiFiClient client; // WiFiClient nesnesi oluştur
  t_httpUpdate_return ret = ESPhttpUpdate.update(client, UPDATE_SERVER + FIRMWARE_FILE, FIRMWARE_VERSION);

  switch (ret) {
    case HTTP_UPDATE_FAILED:
      server.send(200, "text/plain", "Update failed: " + String(ESPhttpUpdate.getLastErrorString()));
      break;
    case HTTP_UPDATE_NO_UPDATES:
      server.send(200, "text/plain", "No updates available.");
      break;
    case HTTP_UPDATE_OK:
      server.send(200, "text/plain", "Update OK. Rebooting...");
      delay(1000);
      ESP.restart();
      break;
  }
}


// LED kontrolü
void handleLED() {
  ledState = !ledState;
  digitalWrite(LED_PIN, ledState ? LOW : HIGH);  // LOW aktif, HIGH pasif
  server.send(200, "text/plain", ledState ? "LED ON" : "LED OFF");
}

// Uzak sunucudan versiyon kontrolü
String checkRemoteVersion() {
  WiFiClient client; // WiFiClient nesnesi oluştur
  HTTPClient http;   // HTTPClient nesnesi oluştur

  // HTTPClient ile bağlantı başlat
  if (http.begin(client, UPDATE_SERVER + VERSION_FILE)) {
    int httpCode = http.GET(); // HTTP GET isteği yap

    if (httpCode == HTTP_CODE_OK) { // İstek başarılı ise
      String remoteVersion = http.getString(); // Gelen cevabı al
      http.end(); // Bağlantıyı kapat
      return remoteVersion; // Versiyonu döndür
    }
    http.end(); // Bağlantıyı kapat
  }
  return ""; // Hata durumunda boş string döndür
}
